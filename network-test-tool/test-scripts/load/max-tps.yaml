# Maximum TPS Test with Advanced Features
test: Maximum TPS Test
description: Measure maximum transactions per second with parallel execution and precise metrics

variables:
  test_duration_ms: 10000
  parallel_senders: 10
  transactions_per_sender: 50
  measurement_intervals: 5

setup:
  accounts:
    deployer:
      privateKey: env:PRIVATE_KEY

scenario:
  - log: "Starting maximum TPS test"

  # Create sender and receiver accounts
  - loop:
      times: parallel_senders
      actions:
        - set:
            sender_{_index}: Account()
            receiver_{_index}: Account()
        - transfer: deployer -> sender_{_index}, 10 ETH
        - transfer: deployer -> receiver_{_index}, 1 ETH

  # Warm-up to establish connections
  - log: "Warming up connections"
  - parallel:
      actions:
        - transfer: sender_0 -> receiver_0, 0.0001 ETH
        - transfer: sender_1 -> receiver_1, 0.0001 ETH
        - transfer: sender_2 -> receiver_2, 0.0001 ETH

  # Measure baseline latency
  - measure:
      name: "baseline_latency"
      start: timestamp()

  - transfer: sender_0 -> receiver_0, 0.0001 ETH

  - measure:
      name: "baseline_latency"
      end: timestamp()

  - log: "Baseline latency: {baseline_latency} ms"

  # Main TPS measurement loop
  - foreach:
      item: interval
      in: range(0, measurement_intervals)
      do:
        - log: "TPS Measurement interval {interval + 1} of {measurement_intervals}"

        # Start measurement
        - measure:
            name: "tps_interval_{interval}"
            start: timestamp()

        - set:
            transaction_count_{interval}: 0

        # Maximum parallel execution
        - parallel:
            maxConcurrency: parallel_senders * 2
            failFast: false
            actions:
              - foreach:
                  item: sender_idx
                  in: range(0, parallel_senders)
                  do:
                    - parallel:
                        actions:
                          - loop:
                              times: transactions_per_sender
                              actions:
                                - transfer: sender_{sender_idx} -> receiver_{sender_idx}, 0.00001 ETH
                                - set:
                                    transaction_count_{interval}: transaction_count_{interval} + 1

        # End measurement
        - measure:
            name: "tps_interval_{interval}"
            end: timestamp()

        # Calculate TPS
        - set:
            duration_ms: tps_interval_{interval}
            total_transactions: parallel_senders * transactions_per_sender
            tps: (total_transactions * 1000) / duration_ms

        - log: "Interval {interval + 1}: {total_transactions} transactions in {duration_ms} ms"
        - log: "TPS: {tps}"

  # Burst TPS test - maximum possible speed
  - log: "Starting burst TPS test"
  - measure:
      name: "burst_test"
      start: timestamp()

  - set:
      burst_count: 0

  # Ultra-high concurrency burst
  - parallel:
      actions:
        - foreach:
            item: i
            in: range(0, 100)
            do:
              - parallel:
                  actions:
                    - transfer: sender_{i % parallel_senders} -> receiver_{(i + 1) % parallel_senders}, 0.00001 ETH
                    - transfer: sender_{(i + 1) % parallel_senders} -> receiver_{(i + 2) % parallel_senders}, 0.00001 ETH
                    - transfer: sender_{(i + 2) % parallel_senders} -> receiver_{i % parallel_senders}, 0.00001 ETH
                    - set:
                        burst_count: burst_count + 3

  - measure:
      name: "burst_test"
      end: timestamp()

  - set:
      burst_tps: (burst_count * 1000) / burst_test

  - log: "Burst test: {burst_count} transactions in {burst_test} ms"
  - log: "Burst TPS: {burst_tps}"

  # Sustained TPS test
  - log: "Starting sustained TPS test"
  - set:
      sustained_start: timestamp()
      sustained_count: 0

  - while: timestamp() - sustained_start < test_duration_ms
    do:
      - parallel:
          batch:
            size: 20
            delay: 0
          actions:
            - foreach:
                item: s
                in: range(0, parallel_senders)
                do:
                  - transfer: sender_{s} -> receiver_{s}, 0.00001 ETH
                  - set:
                      sustained_count: sustained_count + 1

  - set:
      sustained_duration: timestamp() - sustained_start
      sustained_tps: (sustained_count * 1000) / sustained_duration

  - log: "Sustained test: {sustained_count} transactions in {sustained_duration} ms"
  - log: "Sustained TPS: {sustained_tps}"

  # Final statistics
  - log: "Maximum TPS Test Complete"
  - log: "Baseline latency: {baseline_latency} ms"
  - log: "Burst TPS: {burst_tps}"
  - log: "Sustained TPS: {sustained_tps}"

cleanup:
  - foreach:
      item: i
      in: range(0, parallel_senders)
      do:
        - transfer: sender_{i} -> deployer, balance(sender_{i}) - 0.01 ETH
        - transfer: receiver_{i} -> deployer, balance(receiver_{i}) - 0.01 ETH