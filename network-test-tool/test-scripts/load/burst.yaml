# Burst Load Test with Advanced Features
test: Burst Load Test
description: Rapid parallel burst pattern load testing

variables:
  burst_count: 5
  transactions_per_burst: 20
  burst_delay: 2s
  accounts_count: 10

setup:
  accounts:
    deployer:
      privateKey: env:PRIVATE_KEY

scenario:
  - log: "Starting burst load test with {burst_count} bursts"

  # Create test accounts
  - loop:
      times: accounts_count
      actions:
        - set:
            account_{_index}: Account()
        - transfer: deployer -> account_{_index}, 2 ETH

  # Execute burst patterns
  - loop:
      times: burst_count
      actions:
        - log: "Starting burst {_iteration + 1}"

        # Measure burst performance
        - measure:
            name: "burst_{_iteration}_time"
            start: timestamp()

        # Parallel burst execution
        - parallel:
            maxConcurrency: 10
            failFast: false
            actions:
              - loop:
                  times: transactions_per_burst
                  actions:
                    - set:
                        from_account: account_{_index % accounts_count}
                        to_account: account_{(_index + 1) % accounts_count}
                        amount: 0.001 * (_iteration + 1)
                    - transfer: {from_account} -> {to_account}, {amount} ETH

        - measure:
            name: "burst_{_iteration}_time"
            end: timestamp()

        - log: "Burst {_iteration + 1} completed in {burst_{_iteration}_time} ms"
        - log: "TPS: {transactions_per_burst * 1000 / burst_{_iteration}_time}"

        # Delay between bursts
        - if: _iteration < burst_count - 1
          then:
            - wait: burst_delay
            - log: "Cooling down for {burst_delay}"

  # Advanced burst with different patterns
  - log: "Starting advanced burst patterns"

  # Exponential burst
  - foreach:
      item: multiplier
      in: [1, 2, 4, 8, 16]
      do:
        - log: "Exponential burst x{multiplier}"
        - measure:
            name: "exp_burst_{multiplier}"
            start: timestamp()

        - parallel:
            actions:
              - loop:
                  times: multiplier
                  actions:
                    - transfer: account_0 -> account_1, 0.0001 ETH

        - measure:
            name: "exp_burst_{multiplier}"
            end: timestamp()

  # Random burst pattern
  - log: "Random burst pattern"
  - parallel:
      batch:
        size: 5
        delay: 100
      actions:
        - foreach:
            item: i
            in: range(0, 20)
            do:
              - set:
                  from: account_{random(0, accounts_count - 1)}
                  to: account_{random(0, accounts_count - 1)}
              - if: from != to
                then:
                  - transfer: {from} -> {to}, 0.0001 ETH

  # Final statistics
  - log: "Burst test completed"
  - log: "Total bursts: {burst_count}"
  - log: "Transactions per burst: {transactions_per_burst}"

cleanup:
  - foreach:
      item: i
      in: range(0, accounts_count)
      do:
        - transfer: account_{i} -> deployer, balance(account_{i}) - 0.01 ETH