# Conditional Logic Demo with Advanced Features
test: Conditional Logic Demo
description: Demonstrates if/then/else logic and control flow

setup:
  accounts:
    deployer:
      privateKey: env:PRIVATE_KEY

scenario:
  - log: "Starting conditional logic demo"

  # Create test accounts with different balances
  - set:
      alice: Account()
      bob: Account()
      charlie: Account()

  - transfer: deployer -> alice, 10 ETH
  - transfer: deployer -> bob, 5 ETH
  - transfer: deployer -> charlie, 1 ETH

  # Simple if/then/else
  - if: balance(alice) > 5 ETH
    then:
      - transfer: alice -> bob, 2 ETH
      - log: "Alice has enough balance, transferred 2 ETH to Bob"
    else:
      - log: "Alice doesn't have enough balance"

  # Nested conditions
  - if: balance(bob) > 6 ETH
    then:
      - if: balance(charlie) < 2 ETH
        then:
          - transfer: bob -> charlie, 1 ETH
          - log: "Bob helped Charlie with 1 ETH"
        else:
          - log: "Charlie has enough funds"
    else:
      - log: "Bob doesn't have enough to share"

  # Complex conditions with AND/OR
  - if:
      and:
        - balance(alice) > 0
        - balance(bob) > 0
        - balance(charlie) < 10 ETH
    then:
      - transfer: alice -> charlie, 1 ETH
      - transfer: bob -> charlie, 1 ETH
      - log: "Both alice and bob funded charlie"

  # Condition with expressions
  - set:
      totalBalance: balance(alice) + balance(bob) + balance(charlie)

  - if: totalBalance > 15 ETH
    then:
      - log: "Total balance is healthy: {totalBalance} ETH"
    else:
      - log: "Warning: Low total balance: {totalBalance} ETH"

  # Switch-like behavior with multiple conditions
  - if: balance(alice) > 20 ETH
    then:
      - set: {tier: "whale"}
  - else:
      if: balance(alice) > 10 ETH
      then:
        - set: {tier: "large"}
      else:
        if: balance(alice) > 5 ETH
        then:
          - set: {tier: "medium"}
        else:
          - set: {tier: "small"}

  - log: "Alice tier: {tier}"

  # Conditional loop
  - set: {counter: 0}
  - while: counter < 5
    do:
      - if: counter % 2 == 0
        then:
          - log: "Even iteration: {counter}"
          - transfer: alice -> bob, 0.01 ETH
        else:
          - log: "Odd iteration: {counter}"
          - transfer: bob -> alice, 0.01 ETH
      - set: {counter: counter + 1}

  # Error handling with try/catch
  - try:
      - transfer: alice -> bob, 999999999 ETH  # Will fail
    catch:
      - log: "Transfer failed as expected: {$error.message}"
      - transfer: alice -> bob, 0.1 ETH  # Fallback transfer

  # Conditional based on multiple accounts
  - foreach:
      item: account
      in: [alice, bob, charlie]
      do:
        - set:
            bal: balance({account})
        - if: bal > 3 ETH
          then:
            - log: "{account} is wealthy with {bal} ETH"
            - transfer: "{account} -> deployer, 0.5 ETH"
          else:
            - log: "{account} has modest balance of {bal} ETH"
            - transfer: "deployer -> {account}, 0.5 ETH"

  # Complex OR conditions
  - if:
      or:
        - balance(alice) < 1 ETH
        - balance(bob) < 1 ETH
        - balance(charlie) < 1 ETH
    then:
      - log: "At least one account is low on funds"
      - if: balance(alice) < 1 ETH
        then:
          - transfer: deployer -> alice, 1 ETH
      - if: balance(bob) < 1 ETH
        then:
          - transfer: deployer -> bob, 1 ETH
      - if: balance(charlie) < 1 ETH
        then:
          - transfer: deployer -> charlie, 1 ETH

  # Conditional with function calls
  - call: Math.max(balance(alice), balance(bob), balance(charlie))
    returns: maxBalance

  - if: maxBalance == balance(alice)
    then:
      - log: "Alice has the highest balance"
  - else:
      if: maxBalance == balance(bob)
      then:
        - log: "Bob has the highest balance"
      else:
        - log: "Charlie has the highest balance"

  # Assert conditions
  - assert: balance(alice) > 0
    message: "Alice should have positive balance"

  - assert: balance(bob) > 0
    message: "Bob should have positive balance"

  - assert: balance(charlie) > 0
    message: "Charlie should have positive balance"

cleanup:
  - log: "Conditional test completed"
  - foreach:
      item: account
      in: [alice, bob, charlie]
      do:
        - transfer: "{account} -> deployer, balance({account}) - 0.01 ETH"