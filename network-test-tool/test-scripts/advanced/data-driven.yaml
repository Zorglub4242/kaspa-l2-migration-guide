# Data-Driven Testing with Advanced Features
test: Data-Driven Testing Demo
description: Run tests with multiple data sets from CSV and inline data

# Load test data from CSV file
# CSV format: sender,receiver,amount,expected_result
data: ./test-data/transfer-test-cases.csv

# Inline test data as fallback
testData:
  transfers:
    - {sender: alice, receiver: bob, amount: 0.1, expected: success}
    - {sender: bob, receiver: charlie, amount: 0.2, expected: success}
    - {sender: charlie, receiver: alice, amount: 0.3, expected: success}
    - {sender: alice, receiver: bob, amount: 100, expected: fail}  # Should fail - insufficient funds

  scenarios:
    - {name: "small", amounts: [0.001, 0.002, 0.003]}
    - {name: "medium", amounts: [0.01, 0.02, 0.03]}
    - {name: "large", amounts: [0.1, 0.2, 0.3]}

setup:
  accounts:
    deployer:
      privateKey: env:PRIVATE_KEY

scenario:
  - log: "Starting data-driven test"

  # Create accounts for testing
  - set:
      alice: Account()
      bob: Account()
      charlie: Account()

  - transfer: deployer -> alice, 10 ETH
  - transfer: deployer -> bob, 10 ETH
  - transfer: deployer -> charlie, 10 ETH

  # Data-driven test with inline data
  - log: "Testing with inline data"
  - foreach:
      items: "testData.transfers"
      as: "testCase"
      actions:
        - log: "Test case: Transfer {{testCase.amount}} ETH from {{testCase.sender}} to {{testCase.receiver}}"

        - if:
            condition: "testCase.expected == 'success'"
            then:
              - transfer: "{{testCase.sender}} -> {{testCase.receiver}}, {{testCase.amount}} ETH"
              - log: "Transfer succeeded as expected"
            else:
              - try:
                  actions:
                    - transfer: "{{testCase.sender}} -> {{testCase.receiver}}, {{testCase.amount}} ETH"
                    - log: "ERROR: Transfer should have failed!"
                catch:
                  - log: "Transfer failed as expected"

  # Data-driven scenarios
  - foreach:
      items: "testData.scenarios"
      as: "scenario"
      actions:
        - log: "Running {{scenario.name}} scenario"
        - foreach:
            items: "scenario.amounts"
            as: "amount"
            actions:
              - transfer: alice -> bob, {amount} ETH
              - transfer: bob -> charlie, {amount} ETH
              - transfer: charlie -> alice, {amount} ETH
              - log: "Completed round with amount {{amount}} ETH"

  # CSV data processing (when CSV file exists)
  - if:
      condition: "exists(data)"
      then:
        - log: "Processing CSV test data"
        - foreach:
            items: "data"
            as: "row"
            actions:
            - log: "CSV Test {rowIndex}: {row.sender} -> {row.receiver}, {row.amount} ETH"

              # Create accounts if they don't exist
              - if:
                  condition: "!exists(row.sender)"
                  then:
                    - set:
                        "{{row.sender}}": "Account()"
                    - transfer: "deployer -> {{row.sender}}, 5 ETH"

              - if:
                  condition: "!exists(row.receiver)"
                  then:
                    - set:
                        "{{row.receiver}}": "Account()"
                    - transfer: "deployer -> {{row.receiver}}, 1 ETH"

            # Execute transfer
            - transfer: {row.sender} -> {row.receiver}, {row.amount} ETH

              # Verify result
              - assert:
                  expect: "balance({{row.receiver}}) >= {{row.expected_result}}"
                  message: "Balance mismatch for test case"

  # Parameterized test patterns
  - log: "Parameterized test patterns"
  - set:
      testParameters: [
        {users: 2, transactions: 5, amount: 0.01},
        {users: 3, transactions: 10, amount: 0.02},
        {users: 4, transactions: 15, amount: 0.03}
      ]

  - foreach:
      items: "testParameters"
      as: "params"
      actions:
        - log: "Test with {params.users} users, {params.transactions} transactions"

        # Create users for this test
        - set:
            counter: 0
        - while:
            condition: "counter < params.users"
            actions:
              - set:
                  "param_user_{{counter}}": "Account()"
              - transfer: "deployer -> param_user_{{counter}}, 2 ETH"
              - set:
                  counter: "counter + 1"

        # Execute transactions
        - set:
            txCounter: 0
        - while:
            condition: "txCounter < params.transactions"
            actions:
              - set:
                  fromIndex: "txCounter % params.users"
                  toIndex: "(txCounter + 1) % params.users"
              - transfer: "param_user_{{fromIndex}} -> param_user_{{toIndex}}, {{params.amount}} ETH"
              - set:
                  txCounter: "txCounter + 1"

  # Table-driven tests
  - log: "Table-driven tests"
  - set:
      testTable:
        - [alice, bob, 0.1, true]
        - [bob, charlie, 0.2, true]
        - [charlie, alice, 0.3, true]
        - [alice, bob, 1000, false]  # Should fail

  - foreach:
      items: "testTable"
      as: "entry"
      actions:
        - set:
            sender: entry[0]
            receiver: entry[1]
            amount: entry[2]
            shouldSucceed: entry[3]

        - if:
            condition: "shouldSucceed"
          then:
            - transfer: {sender} -> {receiver}, {amount} ETH
              - assert:
                  expect: true
                  message: "Transfer from {{sender}} to {{receiver}} succeeded"
            else:
              - try:
                  actions:
                    - transfer: "{{sender}} -> {{receiver}}, {{amount}} ETH"
                    - assert:
                        expect: false
                        message: "Transfer should have failed"
                catch:
                  - log: "Transfer failed as expected"

  # Performance data collection
  - log: "Collecting performance data"
  - set:
      performanceData: []

  - foreach:
      items: "[10, 20, 30, 40, 50]"
      as: "size"
      actions:
        - set:
            startTime: "timestamp()"
            loopCounter: 0

        - while:
            condition: "loopCounter < size"
            actions:
              - transfer: "alice -> bob, 0.0001 ETH"
              - set:
                  loopCounter: "loopCounter + 1"

        - set:
            endTime: "timestamp()"
            perfTime: "endTime - startTime"

        - set:
            performanceData: "[...performanceData, {size: size, time: perfTime}]"

        - log: "Size {size}: {perf_{size}} ms"

  # Generate report
  - log: "Test execution complete"
  - foreach:
      items: "performanceData"
      as: "perf"
      actions:
        - log: "Performance - Size: {perf.size}, Time: {perf.time} ms, TPS: {perf.size * 1000 / perf.time}"

cleanup:
  - log: "Cleaning up data-driven test"
  - foreach:
      items: "['alice', 'bob', 'charlie']"
      as: "account"
      actions:
        - transfer: {account} -> deployer, balance({account}) - 0.01 ETH