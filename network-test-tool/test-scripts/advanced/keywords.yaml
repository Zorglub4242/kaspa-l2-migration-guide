# Keywords Demo with Advanced Features
test: Keywords Demo
description: Demonstrates reusable keywords and test patterns

# Define custom keywords inline
keywords:
  setup-test-accounts:
    description: "Setup test accounts with funding"
    params: [count, fundingAmount]
    steps:
      - foreach:
          items: "range(0, count)"
          as: "i"
          actions:
            - set:
                "test_account_{{i}}": "Account()"
            - transfer: "deployer -> test_account_{{i}}, {{fundingAmount}} ETH"
      - return: count

  fund-accounts-pattern:
    description: "Reusable pattern for funding accounts"
    params: [accounts, amount]
    steps:
      - foreach:
          items: "accounts"
          as: "account"
          actions:
            - transfer: "deployer -> {{account}}, {{amount}} ETH"
      - log: "Funded {{accounts.length}} accounts with {{amount}} ETH each"

  bulk-transfer-pattern:
    description: "Perform bulk transfers between accounts"
    params: [from_accounts, to_accounts, amounts]
    steps:
      - foreach:
          items: "range(0, from_accounts.length)"
          as: "i"
          actions:
            - transfer: "{{from_accounts[i]}} -> {{to_accounts[i]}}, {{amounts[i]}} ETH"

  round-trip-pattern:
    description: "Round trip transfer pattern"
    params: [account1, account2, amount]
    steps:
      - transfer: "{{account1}} -> {{account2}}, {{amount}} ETH"
      - wait: "500ms"
      - transfer: "{{account2}} -> {{account1}}, {{amount}} ETH"
      - log: "Completed round trip of {{amount}} ETH"

  check-balances:
    description: "Check and log balances of accounts"
    params: [accounts]
    steps:
      - foreach:
          items: "accounts"
          as: "account"
          actions:
            - set:
                bal: "balance({{account}})"
            - log: "{{account}} balance: {{bal}} ETH"

setup:
  accounts:
    deployer:
      privateKey: env:PRIVATE_KEY

scenario:
  - log: "Starting keywords demo"

  # Use custom keyword to setup accounts
  - keyword:
      name: "setup-test-accounts"
      params:
        count: 5
        fundingAmount: 10
      returns: "accountCount"

  - log: "Created {{accountCount}} test accounts"

  # Create named accounts
  - set:
      alice: Account()
      bob: Account()
      charlie: Account()

  # Use funding pattern keyword
  - keyword:
      name: "fund-accounts-pattern"
      params:
        accounts: "[alice, bob, charlie]"
        amount: 5

  # Use bulk transfer pattern
  - keyword:
      name: "bulk-transfer-pattern"
      params:
        from_accounts: "[alice, bob, charlie]"
        to_accounts: "[bob, charlie, alice]"
        amounts: "[0.1, 0.2, 0.3]"

  # Use round trip pattern multiple times
  - foreach:
      items: "[['alice', 'bob'], ['bob', 'charlie'], ['charlie', 'alice']]"
      as: "pair"
      actions:
        - keyword:
            name: "round-trip-pattern"
            params:
              account1: "{{pair[0]}}"
              account2: "{{pair[1]}}"
              amount: 0.5

  # Check all balances
  - keyword:
      name: "check-balances"
      params:
        accounts: "[alice, bob, charlie]"

  # Chain multiple keywords
  - log: "Chaining keywords"

  # Complex keyword composition
  - parallel:
      - keyword:
          name: "round-trip-pattern"
          params:
            account1: "alice"
            account2: "bob"
            amount: 0.1
      - keyword:
          name: "round-trip-pattern"
          params:
            account1: "bob"
            account2: "charlie"
            amount: 0.1
      - keyword:
          name: "round-trip-pattern"
          params:
            account1: "charlie"
            account2: "alice"
            amount: 0.1

  # Conditional keyword execution
  - if:
      condition: "balance(alice) > 5000000000000000000"
      then:
        - keyword:
            name: "bulk-transfer-pattern"
        params:
            from_accounts: "[alice]"
            to_accounts: "[bob]"
            amounts: "[1]"

  # Loop with keyword
  - set:
      loopCounter: 0
  - while:
      condition: "loopCounter < 3"
      actions:
        - keyword:
            name: "round-trip-pattern"
            params:
              account1: "test_account_0"
              account2: "test_account_1"
              amount: 0.01
        - set:
            loopCounter: "loopCounter + 1"

  # Nested keyword calls
  - keyword:
      name: "setup-test-accounts"
      params:
        count: 3
        fundingAmount: 2
      returns: "newAccounts"

  - keyword:
      name: "check-balances"
      params:
        accounts: "[test_account_5, test_account_6, test_account_7]"

  # Measure keyword performance
  - set:
      startTime: "timestamp()"

  - keyword:
      name: "bulk-transfer-pattern"
    params:
        from_accounts: "[alice, bob, charlie]"
        to_accounts: "[test_account_0, test_account_1, test_account_2]"
        amounts: "[0.01, 0.01, 0.01]"

  - set:
      endTime: "timestamp()"
      keyword_performance: "endTime - startTime"

  - log: "Keyword execution took {{keyword_performance}} seconds"

cleanup:
  - log: "Cleaning up"

  # Return funds from named accounts
  - foreach:
      items: "['alice', 'bob', 'charlie']"
      as: "account"
      actions:
        - transfer: "{{account}} -> deployer, balance({{account}}) - 10000000000000000"

  # Return funds from test accounts
  - foreach:
      items: "range(0, 8)"
      as: "i"
      actions:
        - if:
            condition: "exists(test_account_{{i}})"
            then:
              - transfer: "test_account_{{i}} -> deployer, balance(test_account_{{i}}) - 10000000000000000"

  - log: "Keywords demo completed"