# DeFi Keywords Library
# Reusable components for DeFi protocol testing

# DEX Keywords
setup-dex-with-liquidity:
  description: "Deploy DEX and add initial liquidity"
  params: [tokenA, tokenB, amountA, amountB]
  steps:
    - action: deploy
      args: ["dex", "UniswapV2Router"]
    - action: deploy
      args: ["factory", "UniswapV2Factory"]
    - action: deploy
      args: ["pair", "UniswapV2Pair"]

    # Approve tokens
    - action: call
      contract: "{{tokenA}}"
      method: "approve"
      args: ["{{dex}}", "{{amountA}}"]
    - action: call
      contract: "{{tokenB}}"
      method: "approve"
      args: ["{{dex}}", "{{amountB}}"]

    # Add liquidity
    - action: call
      contract: "{{dex}}"
      method: "addLiquidity"
      args: ["{{tokenA}}", "{{tokenB}}", "{{amountA}}", "{{amountB}}", 0, 0, "deployer", "99999999999"]

    - action: log
      args: ["DEX deployed with {{amountA}} {{tokenA}} and {{amountB}} {{tokenB}}"]
    - action: return
      value: "{{dex}}"

perform-swap:
  description: "Execute a token swap on DEX"
  params: [dex, tokenIn, tokenOut, amountIn, minAmountOut, recipient]
  steps:
    # Approve input token
    - action: call
      contract: "{{tokenIn}}"
      method: "approve"
      args: ["{{dex}}", "{{amountIn}}"]

    # Build path
    - action: set
      variable: "path"
      value: ["{{tokenIn}}", "{{tokenOut}}"]

    # Execute swap
    - action: call
      contract: "{{dex}}"
      method: "swapExactTokensForTokens"
      args: ["{{amountIn}}", "{{minAmountOut}}", "{{path}}", "{{recipient}}", "99999999999"]
      returns: "amounts"

    - action: log
      args: ["Swapped {{amountIn}} for {{amounts[1]}} tokens"]
    - action: return
      value: "{{amounts}}"

add-liquidity:
  description: "Add liquidity to an existing pool"
  params: [dex, tokenA, tokenB, amountA, amountB]
  steps:
    - action: call
      contract: "{{tokenA}}"
      method: "approve"
      args: ["{{dex}}", "{{amountA}}"]
    - action: call
      contract: "{{tokenB}}"
      method: "approve"
      args: ["{{dex}}", "{{amountB}}"]
    - action: call
      contract: "{{dex}}"
      method: "addLiquidity"
      args: ["{{tokenA}}", "{{tokenB}}", "{{amountA}}", "{{amountB}}", 0, 0, "msg.sender", "99999999999"]
      returns: "liquidity"
    - action: log
      args: ["Added liquidity: {{liquidity}} LP tokens minted"]
    - action: return
      value: "{{liquidity}}"

remove-liquidity:
  description: "Remove liquidity from a pool"
  params: [dex, tokenA, tokenB, liquidity]
  steps:
    - action: call
      contract: "pair"
      method: "approve"
      args: ["{{dex}}", "{{liquidity}}"]
    - action: call
      contract: "{{dex}}"
      method: "removeLiquidity"
      args: ["{{tokenA}}", "{{tokenB}}", "{{liquidity}}", 0, 0, "msg.sender", "99999999999"]
      returns: "amounts"
    - action: log
      args: ["Removed liquidity: received {{amounts[0]}} and {{amounts[1]}} tokens"]
    - action: return
      value: "{{amounts}}"

# Lending Protocol Keywords
setup-lending-pool:
  description: "Deploy and configure a lending pool"
  params: [asset, initialDeposit]
  steps:
    - action: deploy
      args: ["lendingPool", "AaveLendingPool"]
    - action: deploy
      args: ["aToken", "AToken", ["{{asset}}", "a{{asset}}"]]

    # Initial deposit
    - action: call
      contract: "{{asset}}"
      method: "approve"
      args: ["{{lendingPool}}", "{{initialDeposit}}"]
    - action: call
      contract: "{{lendingPool}}"
      method: "deposit"
      args: ["{{asset}}", "{{initialDeposit}}", "deployer", 0]

    - action: log
      args: ["Lending pool setup with {{initialDeposit}} {{asset}}"]
    - action: return
      value: "{{lendingPool}}"

deposit-to-lending:
  description: "Deposit assets into lending pool"
  params: [lendingPool, asset, amount, onBehalfOf]
  steps:
    - action: call
      contract: "{{asset}}"
      method: "approve"
      args: ["{{lendingPool}}", "{{amount}}"]
    - action: call
      contract: "{{lendingPool}}"
      method: "deposit"
      args: ["{{asset}}", "{{amount}}", "{{onBehalfOf}}", 0]
    - action: log
      args: ["Deposited {{amount}} {{asset}} for {{onBehalfOf}}"]

borrow-from-lending:
  description: "Borrow assets from lending pool"
  params: [lendingPool, asset, amount, interestRateMode]
  steps:
    - action: call
      contract: "{{lendingPool}}"
      method: "borrow"
      args: ["{{asset}}", "{{amount}}", "{{interestRateMode}}", 0, "msg.sender"]
    - action: log
      args: ["Borrowed {{amount}} {{asset}} at rate mode {{interestRateMode}}"]

repay-loan:
  description: "Repay a loan"
  params: [lendingPool, asset, amount, rateMode, onBehalfOf]
  steps:
    - action: call
      contract: "{{asset}}"
      method: "approve"
      args: ["{{lendingPool}}", "{{amount}}"]
    - action: call
      contract: "{{lendingPool}}"
      method: "repay"
      args: ["{{asset}}", "{{amount}}", "{{rateMode}}", "{{onBehalfOf}}"]
    - action: log
      args: ["Repaid {{amount}} {{asset}} for {{onBehalfOf}}"]

# Yield Farming Keywords
setup-staking-pool:
  description: "Setup a staking pool with rewards"
  params: [stakingToken, rewardToken, rewardRate, duration]
  steps:
    - action: deploy
      args: ["stakingPool", "StakingRewards", ["{{stakingToken}}", "{{rewardToken}}"]]
    - action: call
      contract: "{{stakingPool}}"
      method: "setRewardsDuration"
      args: ["{{duration}}"]
    - action: call
      contract: "{{rewardToken}}"
      method: "transfer"
      args: ["{{stakingPool}}", "{{rewardRate * duration}}"]
    - action: call
      contract: "{{stakingPool}}"
      method: "notifyRewardAmount"
      args: ["{{rewardRate * duration}}"]
    - action: log
      args: ["Staking pool setup with {{rewardRate}}/sec rewards for {{duration}} seconds"]
    - action: return
      value: "{{stakingPool}}"

stake-tokens:
  description: "Stake tokens in a pool"
  params: [stakingPool, amount]
  steps:
    - action: call
      contract: "stakingToken"
      method: "approve"
      args: ["{{stakingPool}}", "{{amount}}"]
    - action: call
      contract: "{{stakingPool}}"
      method: "stake"
      args: ["{{amount}}"]
    - action: log
      args: ["Staked {{amount}} tokens"]

claim-rewards:
  description: "Claim staking rewards"
  params: [stakingPool]
  steps:
    - action: call
      contract: "{{stakingPool}}"
      method: "earned"
      args: ["msg.sender"]
      returns: "earned"
    - action: call
      contract: "{{stakingPool}}"
      method: "getReward"
    - action: log
      args: ["Claimed {{earned}} reward tokens"]
    - action: return
      value: "{{earned}}"

unstake-tokens:
  description: "Unstake tokens and claim rewards"
  params: [stakingPool, amount]
  steps:
    - action: call
      contract: "{{stakingPool}}"
      method: "withdraw"
      args: ["{{amount}}"]
    - action: call
      contract: "{{stakingPool}}"
      method: "getReward"
    - action: log
      args: ["Unstaked {{amount}} tokens and claimed rewards"]

# NFT Keywords
mint-nft:
  description: "Mint an NFT to an address"
  params: [nftContract, to, tokenId, tokenURI]
  steps:
    - action: call
      contract: "{{nftContract}}"
      method: "safeMint"
      args: ["{{to}}", "{{tokenId}}"]
    - if:
        condition: "{{tokenURI}} != null"
        then:
          - action: call
            contract: "{{nftContract}}"
            method: "setTokenURI"
            args: ["{{tokenId}}", "{{tokenURI}}"]
    - action: log
      args: ["Minted NFT #{{tokenId}} to {{to}}"]
    - action: return
      value: "{{tokenId}}"

setup-nft-marketplace:
  description: "Deploy and setup NFT marketplace"
  params: [feePercent]
  steps:
    - action: deploy
      args: ["marketplace", "NFTMarketplace", ["{{feePercent}}"]]
    - action: deploy
      args: ["nft", "ERC721", ["TestNFT", "TNFT"]]
    - action: log
      args: ["NFT marketplace deployed with {{feePercent}}% fee"]
    - action: return
      value: {marketplace: "{{marketplace}}", nft: "{{nft}}"}

list-nft-for-sale:
  description: "List an NFT on marketplace"
  params: [marketplace, nft, tokenId, price]
  steps:
    - action: call
      contract: "{{nft}}"
      method: "approve"
      args: ["{{marketplace}}", "{{tokenId}}"]
    - action: call
      contract: "{{marketplace}}"
      method: "listItem"
      args: ["{{nft}}", "{{tokenId}}", "{{price}}"]
    - action: log
      args: ["Listed NFT #{{tokenId}} for {{price}}"]

# Flash Loan Keywords
execute-flash-loan:
  description: "Execute a flash loan"
  params: [lendingPool, asset, amount, operations]
  steps:
    - action: deploy
      args: ["flashLoanReceiver", "FlashLoanReceiver"]

    # Setup operations in receiver
    - foreach:
        item: "op"
        in: "{{operations}}"
        do:
          - action: call
            contract: "{{flashLoanReceiver}}"
            method: "addOperation"
            args: ["{{op}}"]

    # Execute flash loan
    - action: call
      contract: "{{lendingPool}}"
      method: "flashLoan"
      args: ["{{flashLoanReceiver}}", "{{asset}}", "{{amount}}", "0x"]

    - action: log
      args: ["Flash loan executed: {{amount}} {{asset}}"]

# Aggregated DeFi Operations
setup-complete-defi:
  description: "Setup a complete DeFi ecosystem"
  params: [config]
  steps:
    # Deploy tokens
    - action: run-keyword
      keyword: "deploy-token"
      params: ["USDC", "USDC", 1000000]
      returns: "usdc"
    - action: run-keyword
      keyword: "deploy-token"
      params: ["DAI", "DAI", 1000000]
      returns: "dai"

    # Setup DEX
    - action: run-keyword
      keyword: "setup-dex-with-liquidity"
      params: ["{{usdc}}", "{{dai}}", 10000, 10000]
      returns: "dex"

    # Setup lending
    - action: run-keyword
      keyword: "setup-lending-pool"
      params: ["{{usdc}}", 50000]
      returns: "lendingPool"

    # Setup staking
    - action: run-keyword
      keyword: "setup-staking-pool"
      params: ["{{usdc}}", "{{dai}}", 10, 86400]
      returns: "stakingPool"

    - action: log
      args: ["Complete DeFi ecosystem deployed"]
    - action: return
      value:
        usdc: "{{usdc}}"
        dai: "{{dai}}"
        dex: "{{dex}}"
        lendingPool: "{{lendingPool}}"
        stakingPool: "{{stakingPool}}"