# Common Keywords Library
# Reusable test components for common blockchain operations

# Account Management Keywords
setup-accounts:
  description: "Create multiple accounts with initial balances"
  params: [accounts]
  steps:
    - foreach:
        item: account
        in: "{{accounts}}"
        do:
          - action: create-account
            args: ["{{account.name}}", "{{account.balance}}"]

fund-account:
  description: "Fund an account from deployer"
  params: [account, amount]
  steps:
    - action: transfer
      args: ["deployer", "{{account}}", "{{amount}}"]
    - action: log
      args: ["Funded {{account}} with {{amount}}"]

check-balance:
  description: "Verify account balance"
  params: [account, expected]
  steps:
    - action: get
      args: ["balance", "{{account}}.balance"]
    - action: assert
      args: ["balance == {{expected}}"]
    - action: log
      args: ["âœ“ Balance check passed for {{account}}"]

# Token Operations Keywords
deploy-token:
  description: "Deploy a standard ERC20 token"
  params: [name, symbol, supply]
  steps:
    - action: deploy
      args: ["token", "ERC20", ["{{name}}", "{{symbol}}", "{{supply}}"]]
    - action: log
      args: ["Deployed token {{name}} ({{symbol}}) with supply {{supply}}"]
    - action: return
      value: "{{token}}"

distribute-tokens:
  description: "Distribute tokens to multiple recipients"
  params: [token, recipients, amount]
  steps:
    - foreach:
        item: recipient
        in: "{{recipients}}"
        do:
          - action: call
            contract: "{{token}}"
            method: "transfer"
            args: ["{{recipient}}", "{{amount}}"]
          - action: log
            args: ["Sent {{amount}} tokens to {{recipient}}"]

approve-and-transfer:
  description: "Approve and transfer tokens in one keyword"
  params: [token, spender, amount]
  steps:
    - action: call
      contract: "{{token}}"
      method: "approve"
      args: ["{{spender}}", "{{amount}}"]
    - action: call
      contract: "{{token}}"
      method: "transfer"
      args: ["{{spender}}", "{{amount}}"]

# Validation Keywords
validate-transfer:
  description: "Validate a transfer was successful"
  params: [from, to, amount, token]
  steps:
    - action: get
      args: ["balanceBefore", "{{to}}.balance"]
    - action: call
      contract: "{{token}}"
      method: "transfer"
      from: "{{from}}"
      args: ["{{to}}", "{{amount}}"]
    - action: get
      args: ["balanceAfter", "{{to}}.balance"]
    - action: assert
      args: ["balanceAfter == balanceBefore + {{amount}}"]

check-token-balance:
  description: "Check ERC20 token balance"
  params: [token, account, expected]
  steps:
    - action: call
      contract: "{{token}}"
      method: "balanceOf"
      args: ["{{account}}"]
      returns: balance
    - action: assert
      args: ["balance == {{expected}}"]
    - action: return
      value: "{{balance}}"

# Batch Operations Keywords
batch-transfer:
  description: "Send ETH to multiple recipients"
  params: [from, transfers]
  steps:
    - foreach:
        item: transfer
        in: "{{transfers}}"
        do:
          - action: transfer
            from: "{{from}}"
            to: "{{transfer.to}}"
            amount: "{{transfer.amount}}"
          - action: log
            args: ["Transferred {{transfer.amount}} from {{from}} to {{transfer.to}}"]

batch-approve:
  description: "Approve multiple spenders for a token"
  params: [token, approvals]
  steps:
    - foreach:
        item: approval
        in: "{{approvals}}"
        do:
          - action: call
            contract: "{{token}}"
            method: "approve"
            args: ["{{approval.spender}}", "{{approval.amount}}"]

# Gas Measurement Keywords
measure-gas:
  description: "Measure gas usage for an operation"
  params: [operation]
  steps:
    - action: get
      args: ["gasBefore", "gasUsed"]
    - action: execute
      args: ["{{operation}}"]
    - action: get
      args: ["gasAfter", "gasUsed"]
    - action: set
      variable: "gasUsed"
      value: "gasAfter - gasBefore"
    - action: log
      args: ["Gas used: {{gasUsed}}"]
    - action: return
      value: "{{gasUsed}}"

# Error Handling Keywords
safe-transfer:
  description: "Transfer with error handling"
  params: [from, to, amount]
  steps:
    - action: get
      args: ["balance", "{{from}}.balance"]
    - if:
        condition: "balance >= {{amount}}"
        then:
          - action: transfer
            from: "{{from}}"
            to: "{{to}}"
            amount: "{{amount}}"
          - action: log
            args: ["Transfer successful"]
        else:
          - action: log
            args: ["Insufficient balance: {{balance}} < {{amount}}"]
          - action: return
            value: false
    - action: return
      value: true

# Setup Keywords
setup-test-environment:
  description: "Setup a complete test environment"
  params: [config]
  steps:
    - action: log
      args: ["Setting up test environment..."]
    - action: run-keyword
      keyword: "setup-accounts"
      params: ["{{config.accounts}}"]
    - action: run-keyword
      keyword: "deploy-token"
      params: ["{{config.token.name}}", "{{config.token.symbol}}", "{{config.token.supply}}"]
      returns: "token"
    - action: log
      args: ["Test environment ready"]
    - action: return
      value: "{{token}}"

# Cleanup Keywords
cleanup-test:
  description: "Clean up after test execution"
  params: []
  steps:
    - action: log
      args: ["Cleaning up test resources..."]
    - action: reset
      args: ["accounts"]
    - action: reset
      args: ["contracts"]
    - action: log
      args: ["Cleanup complete"]

# Timing Keywords
wait-and-check:
  description: "Wait for a condition to be true"
  params: [condition, timeout, interval]
  steps:
    - action: set
      variable: "elapsed"
      value: 0
    - action: while
      condition: "elapsed < {{timeout}}"
      do:
        - if:
            condition: "{{condition}}"
            then:
              - action: log
                args: ["Condition met after {{elapsed}}ms"]
              - action: return
                value: true
        - action: wait
          args: ["{{interval}}"]
        - action: set
          variable: "elapsed"
          value: "elapsed + {{interval}}"
    - action: log
      args: ["Timeout: condition not met after {{timeout}}ms"]
    - action: return
      value: false