# Conditional Flow Example
# Demonstrates if/then/else logic and control flow

test: Conditional Logic Demo
network: kasplex
report: detailed

setup:
  alice: 10 ETH
  bob: 5 ETH
  charlie: 1 ETH

  contracts:
    token: ERC20("TestToken", "TEST", 1000000)

scenario:
  # Simple if/then/else
  - if: balance(alice) > 5 ETH
    then:
      - transfer: alice -> bob, 2 ETH
      - log: "Alice has enough balance, transferred 2 ETH"
    else:
      - log: "Alice doesn't have enough balance"

  # Nested conditions
  - if: balance(bob) > 6 ETH
    then:
      - if: token.balanceOf(bob) == 0
        then:
          - token.transfer: deployer -> bob, 1000
          - log: "Bob received tokens"
        else:
          - log: "Bob already has tokens"

  # Complex conditions with AND/OR
  - if:
      and:
        - balance(alice) > 0
        - balance(bob) > 0
        - balance(charlie) < 10 ETH
    then:
      - transfer: alice -> charlie, 1 ETH
      - transfer: bob -> charlie, 1 ETH
      - log: "Both alice and bob funded charlie"

  # Condition with expressions
  - set:
      totalBalance: balance(alice) + balance(bob) + balance(charlie)

  - if: "{{totalBalance}} > 15 ETH"
    then:
      - log: "Total balance is healthy: {{totalBalance}}"
    else:
      - log: "Warning: Low total balance: {{totalBalance}}"

  # Switch-like behavior with multiple conditions
  - if: balance(alice) > 20 ETH
    then:
      - set: {tier: "whale"}
  - else:
      if: balance(alice) > 10 ETH
      then:
        - set: {tier: "large"}
      else:
        if: balance(alice) > 5 ETH
        then:
          - set: {tier: "medium"}
        else:
          - set: {tier: "small"}

  - log: "Alice tier: {{tier}}"

  # Conditional loop
  - set: {counter: 0}
  - while: "{{counter}} < 5"
    do:
      - if: "{{counter}} % 2 == 0"
        then:
          - log: "Even iteration: {{counter}}"
        else:
          - log: "Odd iteration: {{counter}}"
      - set: {counter: "{{counter}} + 1"}

  # Error handling with try/catch
  - try:
      - token.transfer: alice -> bob, 999999999  # Will fail
    catch:
      - log: "Transfer failed as expected: {{$$error.message}}"
      - token.transfer: alice -> bob, 100  # Fallback transfer

  # Conditional based on contract state
  - call: token.totalSupply()
    returns: supply

  - if: "{{supply}} == 1000000"
    then:
      - log: "Total supply is correct"
      - assert: token.totalSupply() == 1000000
    else:
      - log: "Warning: Unexpected total supply: {{supply}}"

cleanup:
  - log: "Test completed"