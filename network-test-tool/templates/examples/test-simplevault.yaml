# Complete Test Example for SimpleVault.sol
# This shows how to thoroughly test a user's Solidity contract

test: SimpleVault Contract Complete Test
description: Testing all features of the SimpleVault.sol contract
network: [kasplex, igra, sepolia]

setup:
  accounts:
    deployer: 100 ETH
    alice: 10 ETH
    bob: 10 ETH
    charlie: 10 ETH
    eve: 10 ETH  # Attacker

  contracts:
    # Deploy the SimpleVault from .sol file
    vault:
      type: Solidity
      source: ./sample-contracts/SimpleVault.sol
      contract: SimpleVault  # Contract name in the file
      args: []  # No constructor arguments
      from: deployer

scenario:
  # =====================================
  # Basic Functionality Tests
  # =====================================
  - log: "=== Testing Basic Deposit/Withdraw ==="

  # Alice deposits
  - call:
      contract: vault
      method: deposit
      from: alice
      value: 5 ETH

  - check: "vault.balances(alice) == 5 ETH"
    message: "Alice's balance should be 5 ETH"

  - check: "vault.totalDeposits() == 5 ETH"
    message: "Total deposits should be 5 ETH"

  # Bob deposits
  - call:
      contract: vault
      method: deposit
      from: bob
      value: 3 ETH

  # Try immediate withdrawal (should fail - locked)
  - call:
      contract: vault
      method: withdraw
      args: ["1 ETH"]
      from: alice
      expect: REVERT
      expect_message: "Still locked"

  # Check lock time
  - call:
      contract: vault
      method: timeUntilUnlock
      args: [alice]
      expect: "> 0"

  # =====================================
  # Emergency Withdrawal Test
  # =====================================
  - log: "=== Testing Emergency Withdrawal (with penalty) ==="

  - set:
      alice_balance_before: alice.balance

  # Emergency withdraw with 10% penalty
  - call:
      contract: vault
      method: emergencyWithdraw
      args: ["5 ETH"]
      from: alice

  # Check that Alice received 90% (4.5 ETH)
  - check: "vault.balances(alice) == 0"
    message: "Alice's vault balance should be 0"

  - set:
      alice_balance_after: alice.balance

  - check: "alice_balance_after - alice_balance_before >= 4.4 ETH"  # Account for gas
    message: "Alice should receive ~4.5 ETH (90% after penalty)"

  # =====================================
  # Time-based Testing
  # =====================================
  - log: "=== Testing Time Lock Mechanism ==="

  # Charlie deposits
  - call:
      contract: vault
      method: deposit
      from: charlie
      value: 2 ETH

  # Fast-forward time (if supported by network)
  - if:
      condition: "network == 'localhost' || network == 'hardhat'"
      then:
        - call:
            contract: provider
            method: send
            args: ["evm_increaseTime", [86400]]  # 1 day
        - call:
            contract: provider
            method: send
            args: ["evm_mine", []]

  # Otherwise wait for actual time
  - if:
      condition: "network != 'localhost' && network != 'hardhat'"
      then:
        - log: "Waiting for unlock period..."
        - wait:
            condition: "vault.timeUntilUnlock(charlie) == 0"
            timeout: 90000  # Max 90 seconds for testing

  # Now withdrawal should work
  - call:
      contract: vault
      method: withdraw
      args: ["1 ETH"]
      from: charlie

  - check: "vault.balances(charlie) == 1 ETH"
    message: "Charlie should have 1 ETH remaining"

  # =====================================
  # Owner Functions Test
  # =====================================
  - log: "=== Testing Owner Functions ==="

  # Check owner
  - call:
      contract: vault
      method: owner
      expect: deployer

  # Pause contract
  - call:
      contract: vault
      method: pause
      from: deployer

  # Try to deposit while paused (should fail)
  - call:
      contract: vault
      method: deposit
      from: bob
      value: 1 ETH
      expect: REVERT
      expect_message: "Contract is paused"

  # Unpause
  - call:
      contract: vault
      method: unpause
      from: deployer

  # Now deposit should work
  - call:
      contract: vault
      method: deposit
      from: bob
      value: 1 ETH

  # Collect penalties
  - measure:
      name: "Penalty Collection Gas"
      metric: gas
      start:
        call:
          contract: vault
          method: collectPenalties
          from: deployer

  # =====================================
  # Security Tests
  # =====================================
  - log: "=== Security Testing ==="

  # Test: Non-owner trying to pause
  - call:
      contract: vault
      method: pause
      from: eve
      expect: REVERT
      expect_message: "Not owner"

  # Test: Reentrancy protection
  # Deploy attacker contract
  - deploy:
      name: attacker
      contract: Solidity
      source: |
        contract ReentrancyAttacker {
          SimpleVault vault;
          constructor(address _vault) { vault = SimpleVault(_vault); }
          receive() external payable {
            if (address(vault).balance >= 1 ether) {
              vault.emergencyWithdraw(1 ether);
            }
          }
          function attack() external payable {
            vault.deposit{value: msg.value}();
            vault.emergencyWithdraw(msg.value);
          }
        }
      args: [vault.address]
      from: eve

  - call:
      contract: attacker
      method: attack
      from: eve
      value: 1 ETH
      expect: REVERT  # Should fail due to reentrancy protection

  # Test: Overflow protection
  - call:
      contract: vault
      method: deposit
      from: eve
      value: "57896044618658097711785492504343953926634992332820282019728792003956564819967 wei"  # uint256 max / 2
      expect: REVERT  # Should overflow

  # =====================================
  # Gas Optimization Tests
  # =====================================
  - log: "=== Gas Optimization Analysis ==="

  - parallel:
    - measure:
        name: "Deposit Gas Cost"
        metric: gas
        start:
          call:
            contract: vault
            method: deposit
            from: alice
            value: 0.1 ETH

    - measure:
        name: "Withdraw Gas Cost"
        metric: gas
        start:
          call:
            contract: vault
            method: withdraw
            args: ["0.1 ETH"]
            from: charlie

    - measure:
        name: "Emergency Withdraw Gas Cost"
        metric: gas
        start:
          call:
            contract: vault
            method: emergencyWithdraw
            args: ["0.1 ETH"]
            from: bob

  # =====================================
  # Stress Testing
  # =====================================
  - log: "=== Stress Testing with Multiple Users ==="

  # Create 20 users and have them all deposit
  - loop:
      times: 20
      actions:
        - set:
            user_{_index}: Account("1 ETH")

        - call:
            contract: vault
            method: deposit
            from: user_{_index}
            value: random(0.01, 0.5) ETH

  # Check total deposits
  - call:
      contract: vault
      method: getStats
      expect:
        totalDeposited: "> 1 ETH"
        isPaused: false

  # Mass emergency withdrawals
  - parallel:
    - loop:
        times: 10
        actions:
          - call:
              contract: vault
              method: emergencyWithdraw
              args: [vault.balances(user_{_index})]
              from: user_{_index}
              continue_on_error: true

  # =====================================
  # Edge Cases
  # =====================================
  - log: "=== Testing Edge Cases ==="

  # Test: Zero deposit
  - call:
      contract: vault
      method: deposit
      from: alice
      value: 0
      expect: REVERT
      expect_message: "Must deposit something"

  # Test: Withdraw more than balance
  - call:
      contract: vault
      method: withdraw
      args: ["1000 ETH"]
      from: alice
      expect: REVERT
      expect_message: "Insufficient balance"

  # Test: Multiple deposits from same user
  - loop:
      times: 5
      actions:
        - call:
            contract: vault
            method: deposit
            from: alice
            value: 0.1 ETH

  - check: "vault.balances(alice) >= 0.5 ETH"

cleanup:
  - log: "=== Cleanup ==="

  # Pause the contract to prevent further deposits
  - call:
      contract: vault
      method: pause
      from: deployer

  # Collect any remaining penalties
  - call:
      contract: vault
      method: collectPenalties
      from: deployer
      continue_on_error: true