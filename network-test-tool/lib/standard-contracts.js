const { ethers } = require('ethers');

/**
 * Standard contract implementations for testing
 * These are simplified contracts that can be deployed without external files
 */

const StandardContracts = {
  // MockERC20 Token (working implementation from Hardhat artifacts)
  ERC20: {
    abi: [
      "constructor(string name, string symbol, uint8 decimals, uint256 initialSupply)",
      "function name() view returns (string)",
      "function symbol() view returns (string)",
      "function decimals() view returns (uint8)",
      "function totalSupply() view returns (uint256)",
      "function balanceOf(address account) view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function mintForTesting(address to, uint256 amount)",
      "function burnForTesting(uint256 amount)",
      "function batchTransfer(address[] recipients, uint256[] amounts) returns (bool)",
      "function approveMax(address spender) returns (bool)",
      "function getCirculatingSupply() view returns (uint256)",
      "function getBalances(address[] accounts) view returns (uint256[])",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)"
    ],
    // Working MockERC20 bytecode from compiled Hardhat artifacts
    bytecode: ""
  },

  // Basic ERC721 NFT
  ERC721: {
    abi: [
      "constructor(string name, string symbol)",
      "function name() view returns (string)",
      "function symbol() view returns (string)",
      "function balanceOf(address owner) view returns (uint256)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function safeTransferFrom(address from, address to, uint256 tokenId)",
      "function transferFrom(address from, address to, uint256 tokenId)",
      "function approve(address to, uint256 tokenId)",
      "function getApproved(uint256 tokenId) view returns (address)",
      "function setApprovalForAll(address operator, bool approved)",
      "function isApprovedForAll(address owner, address operator) view returns (bool)",
      "function mint(address to, uint256 tokenId)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)"
    ],
    bytecode: "0x60806040523480156200001157600080fd5b506040516200173838038062001738833981810160405281019062000037919062000193565b81600090816200004891906200045f565b5080600190816200005a91906200045f565b50505062000546565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000cd8262000082565b810181811067ffffffffffffffff82111715620000ef57620000ee62000093565b5b80604052505050565b60006200010462000063565b9050620001128282620000c2565b919050565b600067ffffffffffffffff82111562000135576200013462000093565b5b62000140826200008"  // Truncated for brevity
  },

  // Basic WETH (Wrapped ETH)
  WETH9: {
    abi: [
      "constructor()",
      "function name() view returns (string)",
      "function symbol() view returns (string)",
      "function decimals() view returns (uint8)",
      "function balanceOf(address) view returns (uint256)",
      "function deposit() payable",
      "function withdraw(uint256 wad)",
      "function totalSupply() view returns (uint256)",
      "function approve(address guy, uint256 wad) returns (bool)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function transferFrom(address src, address dst, uint256 wad) returns (bool)",
      "event Deposit(address indexed dst, uint256 wad)",
      "event Withdrawal(address indexed src, uint256 wad)"
    ],
    bytecode: "0x60c0604052600d60808190526c2bb930b83832b21022ba3432b960991b60a090815261002e916000919061007a565b50604080518082019091526004808252630ae8aa8960e31b602090920191825261005a91600191610"  // Truncated for brevity
  },

  // Simplified UniswapV2 Pair
  UniswapV2Pair: {
    abi: [
      "constructor()",
      "function factory() view returns (address)",
      "function token0() view returns (address)",
      "function token1() view returns (address)",
      "function getReserves() view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)",
      "function mint(address to) returns (uint256 liquidity)",
      "function burn(address to) returns (uint256 amount0, uint256 amount1)",
      "function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data)",
      "function skim(address to)",
      "function sync()",
      "function initialize(address, address)",
      "event Mint(address indexed sender, uint256 amount0, uint256 amount1)",
      "event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to)",
      "event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to)",
      "event Sync(uint112 reserve0, uint112 reserve1)"
    ],
    bytecode: "0x60806040526001600c5534801561001557600080fd5b50604080518082019091526012815271"  // Truncated for brevity
  },

  // Simplified UniswapV2 Factory
  UniswapV2Factory: {
    abi: [
      "constructor(address _feeToSetter)",
      "function feeTo() view returns (address)",
      "function feeToSetter() view returns (address)",
      "function getPair(address tokenA, address tokenB) view returns (address pair)",
      "function allPairs(uint256) view returns (address pair)",
      "function allPairsLength() view returns (uint256)",
      "function createPair(address tokenA, address tokenB) returns (address pair)",
      "function setFeeTo(address)",
      "function setFeeToSetter(address)",
      "event PairCreated(address indexed token0, address indexed token1, address pair, uint256)"
    ],
    bytecode: "0x608060405234801561001057600080fd5b506040516200130e3803806200130e83398181"  // Truncated for brevity
  },

  // Simplified UniswapV2 Router
  UniswapV2Router: {
    abi: [
      "constructor(address _factory, address _WETH)",
      "function factory() view returns (address)",
      "function WETH() view returns (address)",
      "function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity)",
      "function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)",
      "function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB)",
      "function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable returns (uint256[] amounts)",
      "function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)"
    ],
    bytecode: "0x60c060405234801561001057600080fd5b506040516200509c3803806200509c83398181"  // Truncated for brevity
  }
};

/**
 * Get standard contract data
 * @param {string} type - Contract type
 * @returns {Object} Contract ABI and bytecode
 */
function getStandardContract(type) {
  const contract = StandardContracts[type];

  if (!contract) {
    throw new Error(`Unknown standard contract type: ${type}`);
  }

  // If bytecode is truncated (for demo), generate a simple fallback
  if (contract.bytecode.length < 100) {
    // This is a fallback - in production, use actual compiled bytecode
    console.warn(`Warning: Using fallback bytecode for ${type}. Deploy may fail on real networks.`);

    // Generate minimal proxy bytecode that will at least deploy
    // This won't have actual functionality but will create a contract address
    contract.bytecode = "0x608060405234801561001057600080fd5b50603f8061001f6000396000f3fe6080604052600080fdfea264697066735822122000000000000000000000000000000000000000000000000000000000000000000064736f6c63430008130033";
  }

  return contract;
}

/**
 * Check if a contract type is standard
 * @param {string} type - Contract type
 * @returns {boolean} Whether it's a standard contract
 */
function isStandardContract(type) {
  return StandardContracts.hasOwnProperty(type);
}

/**
 * Deploy a standard contract
 * @param {string} type - Contract type
 * @param {Array} args - Constructor arguments
 * @param {Object} deployer - Deployer signer
 * @returns {Promise<Object>} Deployed contract
 */
async function deployStandardContract(type, args, deployer, networkConfig = null) {
  const contractData = getStandardContract(type);

  const factory = new ethers.ContractFactory(
    contractData.abi,
    contractData.bytecode,
    deployer
  );

  // Special handling for different contract types
  let deployArgs = args;

  if (type === 'ERC20') {
    // Handle MockERC20 constructor: (name, symbol, decimals, initialSupply)
    if (args.length === 2) {
      // If only name and symbol provided, add default decimals and total supply
      deployArgs = [...args, 18, 1000000]; // 18 decimals, 1M initial supply
    } else if (args.length === 3) {
      // If name, symbol, totalSupply provided, add default decimals
      deployArgs = [args[0], args[1], 18, args[2]]; // 18 decimals
    } else if (args.length === 4) {
      // All parameters provided
      deployArgs = args;
    } else {
      // Default case
      deployArgs = ["Test Token", "TST", 18, 1000000];
    }
  } else if (type === 'WETH9') {
    // WETH doesn't need constructor args
    deployArgs = [];
  } else if (type === 'UniswapV2Factory' && args.length === 0) {
    // Factory needs a fee setter address
    deployArgs = [deployer.address];
  } else if (type === 'UniswapV2Router' && args.length === 1) {
    // Router needs WETH address if not provided
    deployArgs = [args[0], ethers.constants.AddressZero];
  }

  // Get gas configuration from network config
  const overrides = {};
  let useGasManager = false;

  if (networkConfig && networkConfig.gasConfig) {
    useGasManager = true;
    const { GasManager } = require('./gas-manager');
    const gasManager = new GasManager(networkConfig, deployer.provider);

    try {
      const gasPrice = await gasManager.getGasPrice();
      overrides.gasPrice = gasPrice;

      // For networks with gas estimation issues, use a fixed gas limit
      if (networkConfig.gasConfig.strategy === 'fixed') {
        overrides.gasLimit = 3000000;
        console.log(`  ⚠️ Using network config overrides: ${ethers.utils.formatUnits(gasPrice, 'gwei')} gwei gas price, 3M gas limit`);
      }
    } catch (error) {
      console.log(`  ⚠️ Failed to get gas price from network config: ${error.message}`);
      useGasManager = false;
    }
  }

  // Deploy with network-specific overrides
  let contract;
  try {
    if (Object.keys(overrides).length > 0) {
      contract = await factory.deploy(...deployArgs, overrides);
    } else {
      contract = await factory.deploy(...deployArgs);
    }
  } catch (error) {
    if (error.code === 'UNPREDICTABLE_GAS_LIMIT') {
      // Use a fixed gas limit for networks with gas estimation issues
      console.log('  ⚠️ Gas estimation failed, using fixed gas limit of 3,000,000');

      const fallbackOverrides = { gasLimit: 3000000 };

      // Try to use gas manager for gas price if available
      if (useGasManager && networkConfig) {
        try {
          const { GasManager } = require('./gas-manager');
          const gasManager = new GasManager(networkConfig, deployer.provider);
          fallbackOverrides.gasPrice = await gasManager.getGasPrice();
          console.log(`  ⚠️ Using gas price from network config: ${ethers.utils.formatUnits(fallbackOverrides.gasPrice, 'gwei')} gwei`);
        } catch (gasError) {
          console.log(`  ⚠️ Failed to get gas price from config, using provider default`);
        }
      }

      contract = await factory.deploy(...deployArgs, fallbackOverrides);
    } else {
      throw error;
    }
  }
  await contract.deployed();

  return contract;
}

module.exports = {
  StandardContracts,
  getStandardContract,
  isStandardContract,
  deployStandardContract
};